name: E2E Tests

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to run tests on'
        required: true
        default: 'android'
        type: choice
        options:
          - android
          - ios

jobs:
  e2e-test:
    name: Run E2E Tests
    runs-on: ${{ inputs.platform == 'ios' && 'macos-latest' || 'ubuntu-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build e2e-wrapper package
        run: pnpm build

      # Android specific setup
      - name: Set up JDK 17 (Android)
        if: inputs.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK (Android)
        if: inputs.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Install Android Emulator (Android)
        if: inputs.platform == 'android'
        run: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;android-30;google_apis;x86_64"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd --force --name Pixel_3a_API_30_x86 --device "Pixel 3a" --package "system-images;android-30;google_apis;x86_64"

      - name: Start Android Emulator (Android)
        if: inputs.platform == 'android'
        run: |
          echo "Starting emulator..."
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_3a_API_30_x86 -no-audio -no-boot-anim -no-window -gpu swiftshader_indirect &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
          echo "Emulator started"

      # iOS specific setup
      - name: Install iOS dependencies (iOS)
        if: inputs.platform == 'ios'
        run: |
          # Install applesimutils (required by Detox for iOS testing)
          brew tap wix/brew
          brew install applesimutils
          
          # Install example app dependencies first to make sure React Native is available
          cd examples/TestApp
          pnpm install
          cd ios
          bundle install
          pod install
      
      # Start Metro server in the background
      - name: Start Metro Server
        working-directory: examples/TestApp
        run: |
          echo "Starting Metro server..."
          # Create a metro log file
          touch metro.log
          
          # Start Metro in the background and redirect output to the log file
          nohup pnpm start > metro.log 2>&1 &
          
          # Store the PID of the Metro process
          echo "METRO_PID=$!" >> $GITHUB_ENV
          
          # Wait for Metro to be fully started
          echo "Waiting for Metro server to be ready..."
          attempt=0
          max_attempts=30
          while [ $attempt -lt $max_attempts ]; do
            if grep -q "Metro waiting on" metro.log || grep -q "React Native packager is running" metro.log; then
              echo "Metro server is ready!"
              break
            fi
            attempt=$((attempt+1))
            echo "Waiting for Metro server... attempt $attempt/$max_attempts"
            sleep 2
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Metro server failed to start properly. Logs:"
            cat metro.log
            exit 1
          fi
          
          # Show the Metro logs
          echo "Metro server logs:"
          cat metro.log
      
      # Build the app for testing
      - name: Build Detox App
        working-directory: examples/TestApp
        env:
          CI: true
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            pnpm e2e:android:build
          else
            pnpm e2e:ios:build
          fi
      
      # Start capturing device logs
      - name: Start capturing device logs
        working-directory: examples/TestApp
        run: |
          mkdir -p device_logs
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            # Start capturing Android logs
            nohup adb logcat > device_logs/android.log 2>&1 &
            echo "LOGCAT_PID=$!" >> $GITHUB_ENV
          else
            # Get the UDID of the booted simulator
            UDID=$(xcrun simctl list devices | grep -i "booted" | grep -o "([^)]*)" | grep -o "[^()]*")
            if [ -n "$UDID" ]; then
              echo "Found booted simulator with UDID: $UDID"
              # Start capturing iOS logs
              nohup xcrun simctl spawn $UDID log stream --level debug > device_logs/ios.log 2>&1 &
              echo "SIMLOG_PID=$!" >> $GITHUB_ENV
            else
              echo "No booted simulator found, will boot one for testing"
            fi
          fi

      # Run Detox tests
      - name: Run Detox Tests
        working-directory: examples/TestApp
        env:
          E2EWRAPPER_LOG: debug
          CI: true
          DETOX_LOGLEVEL: trace
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            pnpm e2e:android:run --debug-synchronization 1000 --record-logs all
          else
            pnpm e2e:ios:run --debug-synchronization 1000 --record-logs all
          fi
      
      # Stop capturing device logs
      - name: Stop capturing device logs
        if: always()
        run: |
          if [ -n "$LOGCAT_PID" ]; then
            echo "Stopping Android logcat capture (PID: $LOGCAT_PID)..."
            kill $LOGCAT_PID || true
          fi
          if [ -n "$SIMLOG_PID" ]; then
            echo "Stopping iOS simulator log capture (PID: $SIMLOG_PID)..."
            kill $SIMLOG_PID || true
          fi
      
      # Kill Metro server when done
      - name: Kill Metro Server
        if: always()
        run: |
          if [ -n "$METRO_PID" ]; then
            echo "Stopping Metro server (PID: $METRO_PID)..."
            kill $METRO_PID || true
          fi

      # Archive test artifacts
      - name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-artifacts
          path: |
            examples/TestApp/artifacts
            examples/TestApp/metro.log
            examples/TestApp/device_logs 